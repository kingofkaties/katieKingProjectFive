{"version":3,"sources":["Definition.js","Word.js","App.js","serviceWorker.js","index.js"],"names":["Definition","this","props","activeDef","Component","Word","word","App","state","words","definitions","numOfDefs","axios","get","then","response","setState","data","console","log","callMerriamWebsterApi","definitionsClone","forEach","shortdef","randomNum","Math","floor","random","Object","keys","length","callRandomWordApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iTAceA,E,uKARP,OACI,6BACI,2BAAIC,KAAKC,MAAMC,gB,GANNC,aCWVC,E,uKARP,OACI,gCACI,2BAAIJ,KAAKC,MAAMI,W,GALZF,aCwGJG,G,wDAlGb,WAAYL,GAAQ,IAAD,8BACjB,cAAMA,IAGDM,MAAQ,CACXC,MAAO,GACPC,YAAa,GACbC,UAAW,GACXR,UAAW,GARI,E,gEAaE,IAAD,OAClBS,IAAMC,IAAI,uDAGPC,MAAK,SAACC,GAGL,EAAKC,SAAS,CACZP,MAAOM,EAASE,OAElBC,QAAQC,IAAI,EAAKX,MAAMC,OAGvB,EAAKW,6B,8CAMc,IAAD,OAGhBC,EAAmB,GAGzBpB,KAAKO,MAAMC,MAAMa,SAAQ,SAAChB,GACxBM,IAAMC,IAAN,sEAAyEP,EAAzE,8CAGGQ,MAAK,SAACC,GAGDA,EAASE,KAAK,GAAGM,WACnBF,EAAiBf,GAAQS,EAASE,KAAK,GAAGM,SAAS,IAGrD,IAAMC,EAAYC,KAAKC,MAAMD,KAAKE,SAAW,EAAKnB,MAAMG,WAExD,EAAKK,SAAS,CAGZN,YAAaW,EAGbV,UAAWiB,OAAOC,KAAK,EAAKrB,MAAME,aAAaoB,OAG/C3B,UAAW,EAAKK,MAAMC,MAAMe,a,0CAapCvB,KAAK8B,sB,+BAKL,OACE,kBAAC,WAAD,KAEE,kBAAC,EAAD,CAAY5B,UAAWF,KAAKO,MAAME,YAAYT,KAAKO,MAAML,aAEzD,kBAAC,EAAD,CAAMG,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,KAC7B,kBAAC,EAAD,CAAMH,KAAML,KAAKO,MAAMC,MAAM,U,GA7FnBL,cCME4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.9cbc5e08.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\n\nclass Definition extends Component {\n\n    render() {\n        // console.log(this.state.words)\n        return (\n            <div>\n                <p>{this.props.activeDef}</p>\n            </div>\n        )\n    }\n}\n\nexport default Definition;\n\n","import React, { Component, Fragment } from 'react';\n\nclass Word extends Component {    \n\n    render() {\n        return (\n            <button>\n                <p>{this.props.word}</p>\n            </button>\n        );\n    };\n}\n\nexport default Word;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Definition from './Definition';\nimport Word from './Word';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // initialize state with empty values\n    this.state = {\n      words: [],\n      definitions: {},\n      numOfDefs: [],\n      activeDef: 0\n    };\n  }\n\n  // create function to get 4 random words\n  callRandomWordApi() {\n    axios.get('https://random-word-api.herokuapp.com/word?number=9')\n    \n      // wait until response comes back\n      .then((response) => {\n\n        // store those 4 random words in state\n        this.setState({\n          words: response.data\n        })\n        console.log(this.state.words)\n\n        // call M-W function after THEN method\n        this.callMerriamWebsterApi();\n        }\n      )\n    }\n\n  // create function to get definitions from randomly generated words stored in state\n  callMerriamWebsterApi() {\n\n    // create clone array to store definitions inside while axios loops over each word\n    const definitionsClone = {};\n\n    // map over each item inside state.words array\n    this.state.words.forEach((word) => {\n      axios.get(`https://dictionaryapi.com/api/v3/references/collegiate/json/${word}?key=876ed444-a30f-40ca-9a52-4d2265921d9d`)\n\n        // wait for response to come back\n        .then((response) => {\n\n          // check if word exists in M-W\n          if (response.data[0].shortdef) {\n            definitionsClone[word] = response.data[0].shortdef[0]\n          }\n\n          const randomNum = Math.floor(Math.random() * this.state.numOfDefs)\n\n          this.setState({\n    \n            // push clone array to state\n            definitions: definitionsClone,\n    \n            // count how many keys are in state.definitions object and save to own state\n            numOfDefs: Object.keys(this.state.definitions).length,\n\n            // Select a single definition to be active\n            activeDef: this.state.words[randomNum]\n\n            // check if key exists inside object - Owen slacked me a resource to investigate - if exiists in definition obj, assigtn to state, if not, something else\n          })\n\n        })\n      })\n  }\n\n  // when component is called to page...\n  componentDidMount() {\n\n    // ...call random word function to generate 4 words & use to populate state.words, then populate state.definitions\n    this.callRandomWordApi();\n  }\n  \n  // render elements to the page\n  render () {\n    return (\n      <Fragment>\n\n        <Definition activeDef={this.state.definitions[this.state.activeDef]} />\n        \n        <Word word={this.state.words[0]} />\n        <Word word={this.state.words[1]} />\n        <Word word={this.state.words[2]} />\n        <Word word={this.state.words[3]} />\n        <Word word={this.state.words[4]} />\n        <Word word={this.state.words[5]} />\n        <Word word={this.state.words[6]} />\n        <Word word={this.state.words[7]} />\n        <Word word={this.state.words[8]} />\n        \n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n\n// assign correct \"item\"\n// that correct item === the correct item","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}