{"version":3,"sources":["Definition.js","Word.js","App.js","serviceWorker.js","index.js"],"names":["Definition","props","console","log","shortdefs","Word","this","hwi","hw","Component","App","state","words","data","word","map","axios","get","buildUrl","allWords","callApi","Promise","all","then","response","allWordsData","res","shortdef","def","uuid","meta","setState","currentWord","key","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iTAiHeA,EAlBI,SAACC,GAUhB,OATAC,QAAQC,IAAIF,GAUR,6BACKA,EAAMG,YCjFJC,E,uKARP,OACI,6BACI,2BAAIC,KAAKL,MAAMM,IAAIC,S,GAhBhBC,aCsGJC,G,wDA5Fb,WAAYT,GAAQ,IAAD,6BACjB,cAAMA,GACNC,QAAQC,IAAI,EAAKF,OACjB,EAAKU,MAAQ,CACXC,MAAO,CACL,wBACA,MACA,SACA,OAEFC,KAAM,IAVS,E,qDAcVC,GAEP,MADS,sEAAkEA,EAAlE,+C,gCAIA,IAAD,OACR,OAAOR,KAAKK,MAAMC,MAAMG,KAAI,SAACD,GAC3B,OAAOE,IAAMC,IAAI,EAAKC,SAASJ,S,0CAId,IAAD,OAIZK,EAAWb,KAAKc,UACtBC,QAAQC,IAAIH,GACTI,MAAK,SAACC,GACLtB,QAAQC,IAAIqB,GACZ,IAAMC,EAAeD,EAAST,KAAI,SAACW,GACjC,MAAO,CACLnB,IAAKmB,EAAIb,KAAK,GAAGN,IAAIC,GACrBJ,UAAWsB,EAAIb,KAAK,GAAGc,SAAS,GAChCC,IAAKF,EAAIb,KAAK,GAAGe,IAAI,GACrBC,KAAMH,EAAIb,KAAK,GAAGiB,KAAKD,SAGvB,EAAKE,SAAS,CACZlB,KAAMY,S,+BAgChB,OADAvB,QAAQC,IAAIG,KAAKK,OAGf,6BACGL,KAAKK,MAAME,KAAKE,KAAI,SAACiB,GACpB,OACI,kBAAC,WAAD,KACA,kBAAC,EAAD,CAAYC,IAAKD,EAAYH,KAAOK,KAAKC,SAAU/B,UAAW4B,EAAY5B,YACxE,kBAAC,EAAD,CAAM6B,IAAKD,EAAYH,KAAOK,KAAKC,SAAU5B,IAAKyB,EAAYzB,e,GAzF5DE,cCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.aeb3a4fa.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n// import axios from 'axios';\n// // import Word from './Word';\n\n// class Definition extends Component {\n\n//     constructor(props) {\n//         super(props);\n//         console.log(this.props);\n//         // this.state = {\n//         //     // hwi: {}\n//         // };\n//     }\n\n//     // componentDidMount() {\n\n//     //     // save url containing word\n//     //     const url = 'https://dictionaryapi.com/api/v3/references/collegiate/json/voluminous?key=876ed444-a30f-40ca-9a52-4d2265921d9d';\n\n//     //     // call url through axios\n//     //     axios.get(url)\n        \n//     //         // once the call has completed...\n//     //         .then((response) => {\n//     //             this.setState(() => ({\n//     //                 hwi: response.data[0].hwi\n//     //             })\n//     //             )\n//     //         }\n//     //     )\n//     // }\n\n// // choose 1 word at random and extract definition\n\n//     render() \n//     {\n//         // console.log(this.state.hwi)\n//         return (\n//             <div>\n//                 {/* <p>{this.state.hwi.hw}</p> */}\n//             </div>\n//         )\n//     }\n// }\n\n// export default Definition;\n\n\n\n// BEGINNING OF RECENT CLASS CODE *****\n\n// import React, { Component, Fragment } from 'react';\n// import axios from 'axios';\n// // import Word from './Word';\n\n// class Definition extends Component {\n\n//     constructor(props) {\n//         super(props);\n//     };\n\n\n//         this.buildDef = this.buildDef.bind(this);\n\n//     // build function to render array of shortdefs\n//     // useful bc isolates & keeps \"rendering\" as a single-function thing\n\n//     buildDefs() {\n//         return (\n//             {this.props.shortdef.map( (def) => {\n//                 (<p>{def}</p>)\n//             })}\n//         )\n//     }\n    \n    \n    \n//     // choose 1 word at random and extract definition\n    \n//     render() {\n//         console.log(this.props);\n//         return (\n//             <div>\n//                 {/* <p>{this.props.shortdef[0]}</p> */}\n//             </div>\n//         );\n//     };\n// }\n\n// export default Definition;\n\n// use JSON for making my own random word bank?? use excel?\n\n// END OF RECENT CLASS CODE *******\n\nconst Definition = (props) => {\n    console.log(props)\n\n    // const buildDefs = () => {\n        // return props.shortdefs.map((def, index) => {\n        //     return <p key={index}>{def}</p>\n        // })\n    // }\n\n\n    return (\n        <div>\n            {props.shortdefs}\n            {/* {buildDefs()} */}\n        </div>\n    )\n}\n\nexport default Definition;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\n// import Word from './Word';\n\nclass Word extends Component {\n\n    // constructor(props) {\n    //     super(props);\n    // };\n    \n    // console.log(this.props);\n\n    // componentDidMount() {\n\n\n    // choose 1 word at random and extract definition\n\n    render() {\n        return (\n            <div>\n                <p>{this.props.hwi.hw}</p>\n            </div>\n        );\n    };\n}\n\nexport default Word;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Definition from './Definition';\nimport Word from './Word';\nimport './App.css';\n\nclass App extends Component {\n\n// good idea to keep AJAX calls and state\n// keep AJAX data in state and pass down\n\n// handle edge case if word not found, handle edge case is common word - take data out using filter => grab first element of defintion\n\n\n  constructor(props) {\n    super(props);\n    console.log(this.props);\n    this.state = {\n      words: [\n        \"anti-authoritarianism\",\n        \"dog\",\n        \"bunker\",\n        \"ham\"\n      ],\n      data: []\n    };\n  }\n\n  buildUrl(word) {\n    const url = `https://dictionaryapi.com/api/v3/references/collegiate/json/${word}?key=876ed444-a30f-40ca-9a52-4d2265921d9d`;\n    return url;\n  }\n\n  callApi() {\n    return this.state.words.map((word) => {\n      return axios.get(this.buildUrl(word))\n    })\n  }\n\n  componentDidMount() {\n\n    // save url containing word\n\n    const allWords = this.callApi();\n    Promise.all(allWords)\n      .then((response) => {\n        console.log(response);\n        const allWordsData = response.map((res) => {\n          return {\n            hwi: res.data[0].hwi.hw,\n            shortdefs: res.data[0].shortdef[0],\n            def: res.data[0].def[0],\n            uuid: res.data[0].meta.uuid\n          }\n        })\n            this.setState({\n              data: allWordsData\n            })\n        // this.setState(() => ({\n          // hwi: response.data[0].hwi,\n          // shortdefs\n      })\n\n    // call url through axios\n    // axios.get(url)\n\n      // once the call has completed...\n      // .then((response) => {\n      //   console.log(response.data);\n      //   this.setState(() => ({\n      //     hwi: response.data[0].hwi,\n      //     shortdefs: response.data[0].shortdef\n      //   })\n      //   )\n      // }\n      // )\n  }\n  \n  render () {\n    // const wordRender = this.state.data.map((currentWord) => {\n    //   return (\n    //     <Fragment>\n    //       <Definition shortdefs={currentWord.shortdefs}/>\n    //       <Word hwi={currentWord.hwi} />\n    //     </Fragment>\n    //   )}\n    // )\n    console.log(this.state)\n    return (\n      \n      <div>\n        {this.state.data.map((currentWord) => {\n          return (\n              <Fragment >\n              <Definition key={currentWord.uuid + Math.random()} shortdefs={currentWord.shortdefs} />\n                <Word key={currentWord.uuid + Math.random()} hwi={currentWord.hwi} />\n              </Fragment>\n          )\n        }\n        )}\n        {/* use .map to generate 4 Wrod components */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}