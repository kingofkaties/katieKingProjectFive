{"version":3,"sources":["App.js","Word.js","serviceWorker.js","index.js"],"names":["App","Component","props","state","words","definitions","axios","get","then","response","setState","data","console","log","callMerriamWebsterApi","this","forEach","word","shortdef","callRandomWordApi","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iTAoFeA,GChFIC,Y,wDDIjB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXC,MAAO,GACPC,YAAa,IALE,E,gEASE,IAAD,OAClBC,IAAMC,IAAI,uDACPC,MAAK,SAACC,GAEL,EAAKC,SAAS,CACZN,MAAOK,EAASE,OAElBC,QAAQC,IAAI,EAAKV,MAAMC,OACvB,EAAKU,6B,8CAKc,IAAD,OACtBF,QAAQC,IAAI,MACZE,KAAKZ,MAAMC,MAAMY,SAAQ,SAACC,GACxBX,IAAMC,IAAN,sEAAyEU,EAAzE,8CACKT,MAAK,SAACC,GAEL,EAAKC,SAAS,CACZL,YAAaI,EAASE,KAAK,GAAGO,SAAS,KAEzCN,QAAQC,IAAI,EAAKV,MAAME,qB,0CAQ/BU,KAAKI,sB,+BAoBL,OACE,kC,GA9DYlB,cEMEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.e40bd3ce.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Definition from './Definition';\nimport Word from './Word';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    // console.log(this.props);\n    this.state = {\n      words: [],\n      definitions: {}\n    };\n  }\n\n  callRandomWordApi() {\n    axios.get('https://random-word-api.herokuapp.com/word?number=4')\n      .then((response) => {\n        // console.log(response);\n        this.setState({\n          words: response.data\n        })\n        console.log(this.state.words)\n        this.callMerriamWebsterApi();\n        }\n      )\n  }\n\n  callMerriamWebsterApi() {\n    console.log('hi')\n    this.state.words.forEach((word) => {\n      axios.get(`https://dictionaryapi.com/api/v3/references/collegiate/json/${word}?key=876ed444-a30f-40ca-9a52-4d2265921d9d`)\n          .then((response) => {\n            // console.log(response)\n            this.setState({\n              definitions: response.data[0].shortdef[0]\n            })\n            console.log(this.state.definitions)\n          })\n        })\n      }\n    \n    \n  componentDidMount() {\n\n    this.callRandomWordApi();\n    // this.callMerriamWebsterApi();\n      // .then((response) => {\n      //   // console.log(response);\n      //   const allWordsData = response.map((res) => {\n      //     return {\n      //       hwi: res.data[0].hwi.hw,\n      //       shortdefs: res.data[0].shortdef[0],\n      //       def: res.data[0].def[0],\n      //       uuid: res.data[0].meta.uuid\n      //     }\n      //   })\n      //       this.setState({\n      //         data: allWordsData\n      //       })\n      // })\n  }\n  \n  render () {\n\n    return (\n      <div>\n        {/* {this.state.words.map((currentWord) => {\n          return (\n              <Fragment >\n              <Definition key={currentWord.uuid + Math.random()} shortdefs={currentWord.shortdefs} />\n                <Word key={currentWord.uuid + Math.random()} hwi={currentWord.hwi} />\n              </Fragment>\n          )\n        }\n        )} */}\n        {/* use .map to generate 4 Wrod components */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\n// import Word from './Word';\n\nclass Word extends Component {\n\n    constructor(props) {\n        super(props);\n    };\n    \n\n    render() {\n        return (\n            <div>\n                {/* <p>{this.state.words[0]}</p> */}\n            </div>\n        );\n    };\n}\n\nexport default Word;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}