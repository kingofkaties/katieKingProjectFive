{"version":3,"sources":["Definition.js","Word.js","Counter.js","GameBoard.js","GameOver.js","App.js","serviceWorker.js","index.js"],"names":["Definition","this","props","defArray","currentDef","Component","Word","value","word","onClick","handleWordSelect","className","Counter","currentScore","GameBoard","score","definitionsArray","currentDefinition","wordsArray","map","index","wordSelect","GameOver","window","location","reload","handleClick","App","event","target","state","activeDef","console","log","setState","wordsWithDefs","callRandomWordApi","gameBoardVisible","gameOverVisible","words","definitions","numOfDefs","userChoice","axios","get","then","response","data","callMerriamWebsterApi","definitionsClone","forEach","hasOwnProperty","shortdef","wordsWithDefsClone","push","Object","keys","length","getRandomWord","randomNum","Math","floor","random","randomKey","i","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ecf8b7ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Definition extends Component {\n\n    render() {\n        // console.log(this.state.words)\n        return (\n            <div>\n                <blockquote>\"{this.props.defArray[this.props.currentDef]}\"</blockquote>\n            </div>\n        )\n    }\n}\n\nexport default Definition;\n\n","import React, { Component } from 'react';\n\nclass Word extends Component {\n\n    render() {\n        return (\n            <button value={this.props.word} onClick={this.props.handleWordSelect} className={this.props.className}>\n                {this.props.word}\n            </button>        \n        );\n    };\n}\n\nexport default Word;","import React, { Component } from 'react';\n\nclass Counter extends Component {\n\n    render() {\n        return (\n            <div className=\"scoreCounter\">\n                <h2>Score: {this.props.currentScore}</h2>\n            </div>\n        )\n    }\n}\n\nexport default Counter;","import React, { Component, Fragment } from 'react';\nimport Definition from './Definition';\nimport Counter from './Counter';\nimport Word from './Word';\n\nclass GameBoard extends Component {\n\n    render() {\n        return (\n            <Fragment>\n                <Counter currentScore={this.props.score} />\n            \n                <Definition defArray={this.props.definitionsArray} currentDef={this.props.currentDefinition} />\n                \n                <div className=\"buttonContainer\">\n                    {this.props.wordsArray.map((word, index) => {\n                        return <Word handleWordSelect={this.props.wordSelect} word={this.props.wordsArray[index]} className={`button${[index]}`} />\n                    })}\n                </div>\n\n            </Fragment>\n\n        )\n    }\n}\n\nexport default GameBoard;","import React, { Component, Fragment } from 'react';\nimport Counter from './Counter';\n\nclass GameOver extends Component {\n\n    handleClick() {\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <h3>Game Over</h3>\n                <Counter currentScore={this.props.score}/>\n                <button onClick={this.handleClick}>play again</button>\n            </Fragment>\n        )\n    }\n}\n\nexport default GameOver;","import React, { Component, Fragment } from 'react';\nimport axios from 'axios';\nimport Definition from './Definition';\nimport Word from './Word';\nimport Counter from './Counter';\nimport GameBoard from './GameBoard';\nimport GameOver from './GameOver';\nimport './App.css';\n\nclass App extends Component {\n\n    constructor(props) {\n      super(props);\n\n      // initialize state with empty values\n      this.state = {\n        words: [],\n        definitions: {},\n        wordsWithDefs: [],\n        numOfDefs: [],\n        activeDef: \"\",\n        userChoice: \"\",\n        score: 0,\n        gameBoardVisible: \"show\",\n        gameOverVisible: \"hide\"\n      };\n    }\n\n  // when component is called to page...\n  componentDidMount() {\n\n    // ...call random word function to generate 4 words & use to populate state.words, then populate state.definitions\n    this.callRandomWordApi();\n  }\n    \n  // create function to get 8 random words\n  callRandomWordApi() {\n    axios.get('https://random-word-api.herokuapp.com/word?number=9')\n    \n    // wait until response comes back\n    .then((response) => {\n      \n      // store those 8 random words in state\n      this.setState({\n        words: response.data\n      })\n      \n      // call M-W function after THEN method\n      this.callMerriamWebsterApi();\n    }\n    )\n  }\n  \n  // create function to get definitions from randomly generated words stored in state\n  callMerriamWebsterApi() {\n    \n    // create clone array to store definitions inside while axios loops over each word\n    const definitionsClone = {};\n    \n    // map over each item inside state.words array\n    this.state.words.forEach((word) => {\n      axios.get(`https://dictionaryapi.com/api/v3/references/collegiate/json/${word}?key=876ed444-a30f-40ca-9a52-4d2265921d9d`)\n      \n      // wait for response to come back\n      .then((response) => {\n\n        // check if word exists in M-W\n        if (response.data[0].hasOwnProperty('shortdef')){\n\n          // if word exists in M-W, add to definitionsClone\n          definitionsClone[word] = response.data[0].shortdef[0]\n\n          let wordsWithDefsClone = [...this.state.wordsWithDefs]\n          wordsWithDefsClone.push(word)\n          this.setState({\n            \n            // set state with an array that holds only words that have matching definitions\n            wordsWithDefs: wordsWithDefsClone,\n            \n            // push clone array to state\n            definitions: definitionsClone,\n            \n            // count how many keys are in state.definitions object and save to own state\n            numOfDefs: Object.keys(this.state.definitions).length,          \n          })\n        }\n        this.getRandomWord();      \n      })\n    })\n  }\n\n  getRandomWord() {\n    let randomNum = Math.floor(Math.random() * this.state.numOfDefs)\n    let randomKey = this.state.wordsWithDefs[randomNum]\n\n    for (let i = 0; i <= this.state.wordsWithDefs.length; i++) {\n      if (this.state.wordsWithDefs[i] === randomKey) {\n        this.setState({\n          activeDef: randomKey\n        })\n      }\n    }\n  }\n\n  // change on button click\n  handleClick = (event) => {\n\n    const userChoice = event.target.value;\n\n    if (userChoice === this.state.activeDef) {\n      console.log(\"You got it right!\")\n      this.setState({\n        score: this.state.score + 1, \n        wordsWithDefs: []\n      })\n      this.callRandomWordApi();\n    } else {\n      console.log(\"You got it wrong!\")\n      this.setState({\n        gameBoardVisible: \"hide\",\n        gameOverVisible: \"show\"\n      })\n    }\n  }\n\n  // render elements to the page\n  render () {\n\n  return (\n    <Fragment>\n\n      {/* header */}\n      <header>\n        <h1>Word Nerd</h1>\n      </header>\n\n      {/* game board */}\n      <div className={this.state.gameBoardVisible}>\n        <GameBoard\n        // props for Definition.js\n        definitionsArray={this.state.definitions}\n        currentDefinition={this.state.activeDef}\n        // props for Word.js\n        wordSelect={this.handleClick}\n        wordsArray={this.state.words}\n        // props for Counter.js\n        score={this.state.score}\n        />\n      \n        {/* game over div */}\n        <div className=\"gameOver hide\">\n        <h2>Game Over</h2>\n        <button className=\"playAgain\">Play Again</button>\n        </div>\n      </div>\n\n      {/* game over */}\n      <div className={this.state.gameOverVisible}>\n        <GameOver\n        score={this.state.score} />\n      </div>\n\n      {/* footer */}\n      <footer>\n        © Katie King 2020\n      </footer>\n    </Fragment>\n  );\n  }\n}\n\nexport default App;\n\n// assign correct \"item\"\n// that correct item === the correct item","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}